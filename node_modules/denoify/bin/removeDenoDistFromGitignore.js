#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const getIsDryRun_1 = require("./lib/getIsDryRun");
const fs = require("fs");
const commentJson = require("comment-json");
const removeFromGitignore_1 = require("../tools/removeFromGitignore");
//TODO: Test on windows!
/**
 * To disable dry run mode  DRY_RUN=1 env variable must be set.
 * This function Change change the working directory.
 * */
async function run(params) {
    const { pathToTargetModule, isDryRun, denoDistDirPath = (() => {
        const tsconfigOutDir = commentJson.parse(fs.readFileSync("./tsconfig.json").toString("utf8"))["compilerOptions"]["outDir"];
        return path.join(path.dirname(tsconfigOutDir), `deno_${path.basename(tsconfigOutDir)}`); // ./deno_dist
    })() } = params;
    process.chdir(pathToTargetModule);
    if (!fs.existsSync(denoDistDirPath)) {
        console.log("exit 1");
        return;
    }
    const { fixedGitignoreRaw } = (0, removeFromGitignore_1.removeFromGitignore)({
        "pathToTargetModule": ".",
        "fileOrDirPathsToAccept": [denoDistDirPath]
    });
    if (!fixedGitignoreRaw) {
        console.log("exit 2");
        return;
    }
    console.log(`\n${isDryRun ? "(dry)" : ""} .gitignore:\n\n${fixedGitignoreRaw}`);
    if (isDryRun) {
        return;
    }
    fs.writeFileSync(".gitignore", Buffer.from(fixedGitignoreRaw, "utf8"));
}
if (require.main === module) {
    process.once("unhandledRejection", error => {
        throw error;
    });
    const { isDryRun } = (0, getIsDryRun_1.getIsDryRun)();
    run({
        "pathToTargetModule": ".",
        "denoDistDirPath": process.argv[2],
        isDryRun
    });
}
//# sourceMappingURL=removeDenoDistFromGitignore.js.map